Problelm_1(GFG)

Minimum characters to be added at front to make string palindrome.

class Solution {
public:
    int minChar(string str){
        //Write your code here
        string rev = str;
        reverse(rev.begin() , rev.end());
        int size = str.size();
        str+= '$';
        str += rev;
        
        //longest prefix
        int n = str.size();
        
        vector<int>lps(n , 0);
        int pre = 0 , suf = 1;
        
        while(suf < n)
        {
            //if matched
            
            if(str[pre] == str[suf])
            {
                lps[suf] = pre + 1;
                pre++ , suf++;
            }
            //not matched
            
            else
            {
                //at 0
                if(pre == 0)
                {
                    suf++;
                }
                else
                {
                    pre = lps[pre  - 1];
                }
            }
        }
        
        return size -lps[n -1];
    }
};


Problem_2 (Leetcode)
Repeated String Match

class Solution {
public:

 void lpsfind(vector<int>& lps, string s) {
        int pre = 0, suf = 1;

        while (suf < s.size()) {
            if (s[pre] == s[suf]) {
                lps[suf] = pre + 1;
                suf++, pre++;
            } else {
                if (pre == 0) {
                    lps[suf] = 0;
                    suf++;
                } else {
                    pre = lps[pre - 1];
                }
            }
        }
    }

    int KMP_MATCH(string haystack, string needle) {
        if (needle.empty()) return 0; // empty needle is always present

        vector<int> lps(needle.size(), 0);
        lpsfind(lps, needle);

        int first = 0, second = 0;

        while (first < haystack.size() && second < needle.size()) {
            if (haystack[first] == needle[second]) {
                first++, second++;
            } else {
                if (second == 0) {
                    first++;
                } else {
                    second = lps[second - 1];
                }
            }
        }

        if (second == needle.size())
            return 1;

        return 0;
    }



    int repeatedStringMatch(string a, string b) {
        if(a == b)
        return 1;

        int repeat = 1;
        string temp = a;

        while(temp.size() < b.size())
        {
            temp+=a;
            repeat ++;
        }

        //kmp patter search
        if(KMP_MATCH(temp , b) == 1)
        return repeat;
        //temp + a , kmp search
        if(KMP_MATCH(temp+a , b)==1)
        return repeat+1;

        return -1;
    }
};

